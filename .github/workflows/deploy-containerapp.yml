name: Deploy Environment -- Azure Container App

on:
  # push:
  #   branches:
  #     - 'main'
  #     - 'sp-deploy-action'
    
  workflow_dispatch:
    inputs:
      container_registry:
        description: The registry where the container resides.
        required: false
        default: ghcr.io

      app_container_image:
        description: The name of the container image.
        required: true
        default: reddog-traefik

      # app_container_version:
      #   description: The version of the container image.
      #   required: true

      # deployment_github_ref:
      #   description: Repository reference for the deployment to be attached to.
      #   required: true

      # No longer required
      # app_type:
      #   description: Azure application type.
      #   required: true

      # No longer required
      app_name:
        description: The name of the application.
        required: true
        default: reddog-octodemo

      environment_name:
        description: The name of the environment to be deployed
        required: true
        default: reddog-octodemo

jobs:

  set-env:
    name: Set Environment Variables
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.main.outputs.version }}
      created: ${{ steps.main.outputs.created }}
      image: ${{ steps.main.outputs.image }}
      repository: ${{ steps.main.outputs.repository }}  
      container_image_url: ${{ steps.main.outputs.container_image_url }}
    steps:
      - id: main
        run: |
          echo ::set-output name=version::$(echo ${GITHUB_SHA} | cut -c1-7)
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=image::reddog-traefik
          echo ::set-output name=repository::ghcr.io/octodemo/reddog-containerapps
          echo ::set-output name=container_image_url::${repository}/${image}:${version}

  package-service:
    name: Package Service
    needs: set-env
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # password: ${{ secrets.CR_PAT }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: traefik/Dockerfile
          push: true
          tags: |
            ${{ needs.set-env.outputs.repository }}/${{ needs.set-env.outputs.image }}:latest
            ${{ needs.set-env.outputs.repository }}/${{ needs.set-env.outputs.image }}:${{ needs.set-env.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.created=${{ needs.set-env.outputs.created }}
            org.opencontainers.image.revision=${{ needs.set-env.outputs.version }}

      - name: Update Output
        uses: actions/github-script@v6
        env:
          container_registry: ${{ github.event.inputs.container_registry }}
          container_image: ${{ needs.set-env.outputs.image }}
          container_version: ${{ needs.set-env.outputs.version }}
        with:
          script: |
            const registry = process.env.container_registry
              , image = process.env.container_image
              , version = process.env.container_version
              ;
            core.setOutput('container_registry_url', registry);
            core.setOutput('container_full_url', `${registry}/${image}:${version}`);

            

  deploy:
      runs-on: ubuntu-latest
      needs: package-service
      
      steps:
        - name: Azure Login
          uses: azure/login@v1
          with:
            creds: ${{ secrets.SENNAPARSA_AZURE_CREDENTIALS }}

        - name: Add Container App Extension to Azue CLI
          run: |
            echo "Installing containerapp extension"
            az extension add --name containerapp
            # https://github.com/microsoft/azure-container-apps/issues/109
            az provider register --namespace Microsoft.App
            echo "Starting Deploying"
          shell: bash

        - name: Create Container App Environment
          env:
            LOCATION: eastus2 # hardcoded for now but can be passed inas secret or discovered, not required by default, but useful as resource group is location aware
          run: |
            az containerapp env create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
              --name "${{ github.event.inputs.environment_name }}" \
              --location "$LOCATION" \
              --tags ref="${{ needs.set-env.outputs.version }}" \
                  repository="${{ github.repository }}"
          shell: bash
 
        - name: Create Container App
          id: deploy_container_app
          run: |
            echo "creating container app .."
            echo "`${{ needs.set-env.outputs.repository }}/${{ needs.set-env.outputs.image }}:${{ needs.set-env.outputs.version }}`"
            az containerapp create \
              --name "${{ github.event.inputs.app_name }}" \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
              --environment "${{ github.event.inputs.environment_name }}" \
              --image ghcr.io/octodemo/reddog-containerapps/reddog-traefik:${{ github.sha }} \
              --registry-server "${{ github.event.inputs.container_registry }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}" \
              --cpu 0.25 \
              --memory 0.5Gi \
              --target-port 8080 \
              --ingress 'external' \
              --query properties.configuration.ingress.fqdn \
              --tags ref="${{ needs.set-env.outputs.version }}" \
                  repository="${{ github.repository }}"
          shell: bash

        
  
 
  # validate_parameters:
  #   name: Validate deployment parameters
  #   runs-on: ubuntu-20.04

  #   outputs:
  #     validated_container_registry_url: ${{ steps.validate.outputs.container_registry_url }}
  #     validated_container_full_url: ${{ steps.validate.outputs.container_full_url }}
  #     validated_container_registry_username: ${{ steps.validate.outputs.container_registry_username }}
  #     application_name: ${{ steps.validate.outputs.application_name }}

  #   steps:
  #     - name: Validate input parameters
  #       id: validate
  #       uses: actions/github-script@v6
  #       env:
  #         container_registry: ${{ github.event.inputs.container_registry }}
  #         container_image: ${{ github.event.inputs.app_container_image }}
  #         container_version: ${{ github.event.inputs.app_container_version }}
  #         environment_name: ${{ github.event.inputs.environment_name }}
  #       with:
  #         script: |
  #           const registry = process.env.container_registry
  #             , image = process.env.container_image
  #             , version = process.env.container_version
  #             ;

  #           if (! registry || registry.length === 0) {
  #             core.setFailed(`No container registry specified, cannot create deployment.`);
  #           }
  #           core.setOutput('container_registry_url', registry);
  #           core.setOutput('container_full_url', `${registry}/${image}:${version}`);

  #           // [SP] update this for your own registry
  #           core.setOutput('container_registry_username', `octodemobot`);

  #           // [SP] update application name
  #           // Container Apps enforce a 32 character limit on the application name
  #           core.setOutput('application_name', `bookstore-${process.env.environment_name}`.substring(0, 32));

  #     # Ensure we can authenticate using the same credendtials as Azure
  #     - name: Authenticate with Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ steps.validate.outputs.container_registry_url }}
  #         username: ${{ steps.validate.outputs.container_registry_username }}
  #         # password: ${{ secrets.OCTODEMO_OCTODEMOBOT_GHPR_TOKEN }}
  #         password: ${{ secrets.GHPR_TOKEN }}

  #     # Ensure that we can reference the container and the URL is valid before we deploy to Azure
  #     - name: Pull Container
  #       run: docker pull ${{ steps.validate.outputs.container_full_url }}


  # deploy:
  #   name: Deploy to Environment
  #   runs-on: ubuntu-20.04

  #   needs:
  #     - validate_parameters

  #   environment:
  #     name: ${{ github.event.inputs.environment_name }}
  #     url: ${{ steps.get_application_url.outputs.url }}

  #   steps:
  #     - name: Checkout Sources
  #       uses: actions/checkout@v3

  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.OCTODEMO_GITHUB_AZURE_SERVICE_PROVIDER_CREDENTIALS }}

  #     - name: Add Container App Extension to Azue CLI
  #       run: |
  #         az extension add --name containerapp
  #         # https://github.com/microsoft/azure-container-apps/issues/109
  #         az provider register --namespace Microsoft.App
  #       shell: bash

  #     - name: Create Container App Environment
  #       env:
  #         LOCATION: westeurope # hardcoded for now but can be passed inas secret or discovered, not required by default, but useful as resource group is location aware
  #       run: |
  #         az containerapp env create \
  #           --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
  #           --name "${{ github.event.inputs.environment_name }}" \
  #           --location "$LOCATION" \
  #           --tags type="${{ github.event.inputs.app_type }}" \
  #               ref="${{ github.event.inputs.deployment_github_ref }}" \
  #               repository="${{ github.repository }}"
  #       shell: bash

  #     - name: Create Container App
  #       id: deploy_container_app
  #       run: |
  #         az containerapp create \
  #           --name "${{ needs.validate_parameters.outputs.application_name }}" \
  #           --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
  #           --environment "${{ github.event.inputs.environment_name }}" \
  #           --image ${{ needs.validate_parameters.outputs.validated_container_full_url }} \
  #           --registry-server "${{ needs.validate_parameters.outputs.validated_container_registry_url }}" \
  #           --registry-username "${{ needs.validate_parameters.outputs.validated_container_registry_username }}" \
  #           --registry-password "${{ secrets.OCTODEMO_OCTODEMOBOT_GHPR_TOKEN }}" \
  #           --cpu 0.25 \
  #           --memory 0.5Gi \
  #           --target-port 8080 \
  #           --ingress 'external' \
  #           --query properties.configuration.ingress.fqdn \
  #           --tags type="${{ github.event.inputs.app_type }}" \
  #               ref="${{ github.event.inputs.deployment_github_ref }}" \
  #               repository="${{ github.repository }}"
  #       shell: bash

  #     # There is a risk here that there might be multiple deployments of this...
  #     - name: Retrieve Container App Ingress URL
  #       id: container_app_ingress_url
  #       run: |
  #         FQDN=`az containerapp list \
  #           --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
  #           --query "[?properties.template.containers[?image=='${{ needs.validate_parameters.outputs.validated_container_full_url }}']] | [0].properties.configuration.ingress.fqdn"`

  #         echo "::set-output name=fqdn::$FQDN"

  #     - name: Get Application URL
  #       id: get_application_url
  #       uses: actions/github-script@v6
  #       env:
  #         fqdn: ${{ steps.container_app_ingress_url.outputs.fqdn }}
  #       with:
  #         script: |
  #           const fqdn = process.env.fqdn.replaceAll('"', '');

  #           if (!fqdn || fqdn.trim().length === 0) {
  #             core.setFailed('Fully Qualified Domain Name was not successfully retrieved for the Container App');
  #           } else {
  #             core.setOutput('url', `https://${fqdn}`);
  #           }
