name: Deploy Environment -- Azure Container App

on:
  # push:
  #   branches:
  #     - 'main'
  #     - 'sp-deploy-action'
    
  workflow_dispatch:
    inputs:
      container_registry:
        description: The registry where the container resides.
        required: false
        default: ghcr.io

      app_container_image:
        description: The name of the container image.
        required: true
        default: reddog-traefik

      # app_container_version:
      #   description: The version of the container image.
      #   required: true

      # deployment_github_ref:
      #   description: Repository reference for the deployment to be attached to.
      #   required: true

      # No longer required
      # app_type:
      #   description: Azure application type.
      #   required: true

      # No longer required
      app_name:
        description: The name of the application.
        required: true
        default: reddog-octodemo

      environment_name:
        description: The name of the environment to be deployed
        required: true
        default: reddog-octodemo

jobs:

  set-env:
    name: Set Environment Variables
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.main.outputs.version }}
      created: ${{ steps.main.outputs.created }}
      image: ${{ steps.main.outputs.image }}
      repository: ${{ steps.main.outputs.repository }}  
      container_full_url: ${{ steps.main.outputs.container_full_url }}
    steps:
      - id: main
        run: |
          echo ::set-output name=version::$(echo ${GITHUB_SHA} | cut -c1-7)
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=image::reddog-traefik
          echo ::set-output name=repository::ghcr.io/octodemo/reddog-containerapps
          echo ::set-output name=container_full_url::${repository}/${image}:${version}

  package-service:
    name: Package Service
    needs: set-env
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # password: ${{ secrets.CR_PAT }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: traefik/Dockerfile
          push: true
          tags: |
            ${{ needs.set-env.outputs.repository }}/${{ needs.set-env.outputs.image }}:latest
            ${{ needs.set-env.outputs.repository }}/${{ needs.set-env.outputs.image }}:${{ needs.set-env.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.created=${{ needs.set-env.outputs.created }}
            org.opencontainers.image.revision=${{ needs.set-env.outputs.version }}

      - name: Update Output
        uses: actions/github-script@v6
        env:
          container_registry: ${{ github.event.inputs.container_registry }}
          container_image: ${{ needs.set-env.outputs.image }}
          container_version: ${{ needs.set-env.outputs.version }}
          container_full_url: ${{ needs.set-env.outputs.container_full_url }}
        with:
          script: |
            const registry = process.env.container_registry
              , image = process.env.container_image
              , version = process.env.container_version
              ;
            core.setOutput('container_full_url', `${registry}/${image}:${version}`);
      - name: Echo output
        run: echo "${{ needs.set-env.outputs.container_full_url }}"
            

  deploy:
      runs-on: ubuntu-latest
      needs: package-service
      
      steps:
        - name: Azure Login
          uses: azure/login@v1
          with:
            creds: ${{ secrets.SENNAPARSA_AZURE_CREDENTIALS }}

        - name: Add Container App Extension to Azue CLI
          run: |
            echo "Installing containerapp extension"
            az extension add --name containerapp
            # https://github.com/microsoft/azure-container-apps/issues/109
            az provider register --namespace Microsoft.App
            echo "Starting Deploying"
          shell: bash

        - name: Create Container App Environment
          env:
            LOCATION: eastus2 # hardcoded for now but can be passed inas secret or discovered, not required by default, but useful as resource group is location aware
          run: |
            az containerapp env create \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
              --name "${{ github.event.inputs.environment_name }}" \
              --location "$LOCATION" \
              --tags ref="${{ needs.set-env.outputs.version }}" \
                  repository="${{ github.repository }}"
          shell: bash
 
        - name: Create Container App
          id: deploy_container_app
          run: |
            az containerapp create \
              --name "${{ github.event.inputs.app_name }}" \
              --resource-group "${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
              --environment "${{ github.event.inputs.environment_name }}" \
              --image ghcr.io/octodemo/reddog-containerapps/reddog-traefik:${{ needs.set-env.outputs.version }} \
              --registry-server "${{ github.event.inputs.container_registry }}" \
              --registry-username "${{ github.actor }}" \
              --registry-password "${{ secrets.GITHUB_TOKEN }}" \
              --cpu 0.25 \
              --memory 0.5Gi \
              --target-port 8080 \
              --ingress 'external' \
              --query properties.configuration.ingress.fqdn \
              --tags ref="${{ needs.set-env.outputs.version }}" \
                  repository="${{ github.repository }}"
          shell: bash

 # registry url should be ghcr.io/octodemo/reddog-containerapps/reddog-traefik:cb4041d